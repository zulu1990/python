trigger:
- none

pr:
- none

parameters:
- name: developer_token
  displayName: developer token from box app
  type: string

variables:
  - group: 'training-center'
  - name: vmImageName
    value: 'windows-latest'
  - name: json_data
    value: 'empty'

resources:
  repositories:
    - repository: QnARepository
      type: github
      endpoint: zulu1990
      name: zulu1990/QnA-Repo
      ref: refs/heads/main

jobs:
  - job: prepare_notification
    displayName: Prepare Notification
    pool:
      vmImage: $(vmImageName)
    steps:
      - template: python-template.yml
        parameters:
          execute_path: NOTIFICATION
          developer_token: ${{ parameters.developer_token }}
          feedback_files: ''
          work_sheet: False
      - task: CopyFiles@2
        inputs:
          SourceFolder: 'data/notifications'
          Contents: '**.xlsx'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      - publish: '$(Build.ArtifactStagingDirectory)'
        displayName: 'publish notification_list'
        artifact: drop  

  - job: send_notification
    displayName: Send Notification
    pool:
      vmImage: $(vmImageName)          
    dependsOn: prepare_notification
    variables:
      localVariable: $[dependencies.prepare_notification.outputs['outputVars.messageToSend']]
      feedback: $[dependencies.prepare_notification.outputs['outputVars.json_data']]
      checkoutPath: 's/qna-repo'
    steps:
    - checkout: QnARepository
      displayName: Checkout QnA Repository
      path: $(checkoutPath)
      persistCredentials: true  
      clean: true
    - bash: |
        git config --global user.email archil.zivzivadze@gmail.com & git config --global user.name "Pipeline"
        git checkout -b main
      workingDirectory: $(checkoutPath)

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $FolderName = $(checkoutPath) + 'kb-at/Test'
          $FileName = $FolderName + '/TestFile.txt'
          if (Test-Path $FolderName) {
   
              Write-Host "Folder Exists"
              # Perform Delete file from folder operation
          }
          else
          {
  
              #PowerShell Create directory if not exists
              New-Item $FolderName -ItemType Directory
              Write-Host "Folder Created successfully"
          }

          if (!(Test-Path $FileName))
          {
            New-Item -path $FolderName -name TestFile.txt -type "file" -value "my new text"
            Write-Host "Created new file and text content added"
          }
          else
          {
            Add-Content -path $FileName -value "new text content"
            Write-Host "File already exists and new text content added"
          }

    - script: |
        git add .
        git commit -m "deployment $(Build.BuildNumber)"
        git push --set-upstream origin main 
      displayName: Add data.txt file
      workingDirectory: $(checkoutPath)